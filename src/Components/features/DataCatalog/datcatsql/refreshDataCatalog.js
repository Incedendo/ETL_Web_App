export const mergeUpdateCatalogEntitiesFromView =  `MERGE INTO SHARED_TOOLS_DEV.ETL.CATALOG_ENTITIES TT
    USING (
        SELECT DISTINCT
            TARGET_DATABASE,
            TARGET_SCHEMA,
            TARGET_TABLE,
            CAST( NULL AS STRING) COMMENTS,
            CAST(ABS(HASH(UPPER(TRIM(TARGET_DATABASE)),UPPER(TRIM(TARGET_SCHEMA)),UPPER(TRIM(TARGET_TABLE)))) AS STRING) CATALOG_ENTITIES_ID
        FROM "SHARED_TOOLS_DEV"."ETL"."DATA_CATALOG_VW"
        UNION
        SELECT 
            DISTINCT TRIM(UPPER(TARGET_TABLE)) AS TARGET, TARGET_DATABASE, TARGET_SCHEMA, TARGET_TABLE,
            ABS(HASH(UPPER(TRIM(TARGET_DATABASE)), UPPER(TRIM(TARGET_SCHEMA)), UPPER(TRIM(TARGET_TABLE)) )) AS CATALOG_ENTITIES_ID,
            DESCRIPTION AS COMMENTS
        FROM SHARED_TOOLS_DEV.ETL.TEMP_LOAD_TABLE
        WHERE COLUMN_NAME = '' 
            AND TARGET IN (
                SELECT DISTINCT TABLE_NAME FROM "GR_DEV"."INFORMATION_SCHEMA"."TABLES"
                WHERE TABLE_SCHEMA = 'VFA'
              )
        ORDER BY TARGET_SCHEMA, TARGET_TABLE
    ) st 
    ON (TT.CATALOG_ENTITIES_ID = ST.CATALOG_ENTITIES_ID)
    WHEN NOT matched THEN
      INSERT (
          TARGET_DATABASE,
          TARGET_SCHEMA,
          TARGET_TABLE,
          COMMENTS,
          CATALOG_ENTITIES_ID
      ) 
      VALUES 
      (
          ST.TARGET_DATABASE,
          ST.TARGET_SCHEMA,
          ST.TARGET_TABLE,
          ST.COMMENTS,
          ST.CATALOG_ENTITIES_ID
      )
    // WHEN MATCHED THEN
    //   UPDATE SET;`;

export const mergeUpdateCatalogItemsFromView =  `MERGE INTO SHARED_TOOLS_DEV.ETL.CATALOG_ITEMS TT
    USING (
      SELECT DISTINCT
        COLUMN_NAME, 
        DATA_TYPE, 
        PII,
        CAST( NULL AS STRING) COMMENTS,
        CAST(ABS(HASH(UPPER(TRIM(TARGET_DATABASE)),UPPER(TRIM(TARGET_SCHEMA)),UPPER(TRIM(TARGET_TABLE)),UPPER(TRIM(COLUMN_NAME)))) AS STRING) CATALOG_ITEMS_ID,
        CAST(ABS(HASH(UPPER(TRIM(TARGET_DATABASE)),UPPER(TRIM(TARGET_SCHEMA)),UPPER(TRIM(TARGET_TABLE)))) AS STRING) CATALOG_ENTITIES_ID
      FROM "SHARED_TOOLS_DEV"."ETL"."DATA_CATALOG_VW"
      UNION
      SELECT
        COLUMN_NAME, 
        CAST( NULL AS STRING) DATA_TYPE,
        CAST( NULL AS STRING) PII,
        DESCRIPTION AS COMMENTS, 
        CAST(ABS(HASH(UPPER(TRIM(TARGET_DATABASE)), UPPER(TRIM(TARGET_SCHEMA)), UPPER(TRIM(TARGET_TABLE)), UPPER(TRIM(COLUMN_NAME)) )) AS STRING) CATALOG_ITEMS_ID,
        CAST(ABS(HASH(UPPER(TRIM(TARGET_DATABASE)), UPPER(TRIM(TARGET_SCHEMA)), UPPER(TRIM(TARGET_TABLE)) )) AS STRING) CATALOG_ENTITIES_ID
      FROM "SHARED_TOOLS_DEV"."ETL"."TEMP_LOAD_TABLE" 
    ) ST 
    ON (TT.CATALOG_ITEMS_ID = ST.CATALOG_ITEMS_ID)
    WHEN NOT matched THEN
    INSERT (
        COLUMN_NAME, DATA_TYPE, PII, COMMENTS, CATALOG_ITEMS_ID, CATALOG_ENTITIES_ID 
    ) 
    VALUES 
    (
        ST.COLUMN_NAME, ST.DATA_TYPE, ST.PII, ST.COMMENTS, ST.CATALOG_ITEMS_ID, ST.CATALOG_ENTITIES_ID
    );`;

export const mergeUpdateCatalogEntityLineageFromView  =  `MERGE INTO SHARED_TOOLS_DEV.ETL.CATALOG_ENTITY_LINEAGE TT
  USING (
      SELECT
        UUID_STRING() CATALOG_ENTITY_LINEAGE_ID,
        CAST(ABS(HASH(UPPER(TRIM(TARGET_DATABASE)),UPPER(TRIM(TARGET_SCHEMA)),UPPER(TRIM(TARGET_TABLE)))) AS STRING) CATALOG_ENTITIES_ID, 
        ORIGIN_INFORMATION,
        CONFIG_NAME,
        EXTRACT_CONFIG_ID,
        SOURCE_TABLE,
        EXTRACT_SCHEMA,
        SYSTEM_CONFIG_TYPE,
        SYSTEM_CONFIG_DESCRIPTION AS LINEAGE, 
        NOTIFICATIONEMAILS,
        REFRESH_INTERVAL,
        TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP) AS createddate,
        TO_TIMESTAMP_NTZ(CURRENT_TIMESTAMP) AS lastmodifeddate
      FROM "SHARED_TOOLS_DEV"."ETL"."DATA_CATALOG_VW"
      GROUP BY 
        TARGET_TABLE,
        TARGET_SCHEMA,
        TARGET_DATABASE,
        ORIGIN_INFORMATION,
        CONFIG_NAME,
        EXTRACT_CONFIG_ID,
        SOURCE_TABLE,
        EXTRACT_SCHEMA,
        SYSTEM_CONFIG_TYPE,
        SYSTEM_CONFIG_DESCRIPTION, 
        NOTIFICATIONEMAILS,
        REFRESH_INTERVAL
  ) st 
  ON (TT.CATALOG_ENTITIES_ID = ST.CATALOG_ENTITIES_ID)
  WHEN NOT matched THEN
  INSERT (
      CATALOG_ENTITIES_ID, 
      ORIGIN_INFORMATION,
      CONFIG_NAME,
      EXTRACT_CONFIG_ID,
      SOURCE_TABLE,
      EXTRACT_SCHEMA,
      SYSTEM_CONFIG_TYPE,
      LINEAGE, 
      NOTIFICATIONEMAILS,
      REFRESH_INTERVAL
  ) 
  VALUES 
  (
      ST.CATALOG_ENTITIES_ID, 
      ST.ORIGIN_INFORMATION,
      ST.CONFIG_NAME,
      ST.EXTRACT_CONFIG_ID,
      ST.SOURCE_TABLE,
      ST.EXTRACT_SCHEMA,
      ST.SYSTEM_CONFIG_TYPE,
      ST.LINEAGE, 
      ST.NOTIFICATIONEMAILS,
      ST.REFRESH_INTERVAL
  );`;


  //MERGE FROM TEMP_LOAD_TABLE
  export const mergeUpdateCatalogItemsFromTempTable = `MERGE INTO SHARED_TOOLS_DEV.ETL.CATALOG_ITEMS TT USING
  (SELECT
       COLUMN_NAME, 
       DESCRIPTION, 
       ABS(HASH(UPPER(TRIM(TARGET_DATABASE)), UPPER(TRIM(TARGET_SCHEMA)), UPPER(TRIM(TARGET_TABLE)), UPPER(TRIM(COLUMN_NAME)) )) AS CATALOG_ITEMS_ID,
       ABS(HASH(UPPER(TRIM(TARGET_DATABASE)), UPPER(TRIM(TARGET_SCHEMA)), UPPER(TRIM(TARGET_TABLE)) )) AS CATALOG_ENTITIES_ID
   FROM "SHARED_TOOLS_DEV"."ETL"."TEMP_LOAD_TABLE" 
  )ST
  ON(TT.CATALOG_ITEMS_ID = ST.CATALOG_ITEMS_ID)
  WHEN NOT matched THEN
    INSERT (
      COLUMN_NAME,
      COMMENTS,
      CATALOG_ITEMS_ID,
      CATALOG_ENTITIES_ID
    ) 
    VALUES 
    (
      ST.COLUMN_NAME,
      ST.DESCRIPTION,
      ST.CATALOG_ITEMS_ID,
      ST.CATALOG_ENTITIES_ID
    )
  WHEN MATCHED THEN
       UPDATE SET TT.COMMENTS = ST.DESCRIPTION;`

//MERGE FROM TEMP_LOAD_TABLE
export const mergeUpdateCatalogEntitiesFromTempTable = `MERGE INTO SHARED_TOOLS_DEV.ETL.CATALOG_ENTITIES TT USING
(
    SELECT 
        DISTINCT TARGET_DATABASE, TARGET_SCHEMA, TARGET_TABLE,
        ABS(HASH(UPPER(TRIM(TARGET_DATABASE)), UPPER(TRIM(TARGET_SCHEMA)), UPPER(TRIM(TARGET_TABLE)) )) AS CATALOG_ENTITIES_ID
    FROM SHARED_TOOLS_DEV.ETL.TEMP_LOAD_TABLE
    ORDER BY TARGET_SCHEMA, TARGET_TABLE
)ST
ON(TT.CATALOG_ENTITIES_ID = ST.CATALOG_ENTITIES_ID)
WHEN NOT matched THEN
  INSERT (
    TARGET_DATABASE, TARGET_SCHEMA, TARGET_TABLE,
    CATALOG_ENTITIES_ID
  ) 
  VALUES 
  (
    ST.TARGET_DATABASE,
    ST.TARGET_SCHEMA,
    ST.TARGET_TABLE,
    ST.CATALOG_ENTITIES_ID
  );`